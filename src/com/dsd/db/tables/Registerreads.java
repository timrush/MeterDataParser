/*
 * This file is generated by jOOQ.
*/
package com.dsd.db.tables;


import com.dsd.db.Indexes;
import com.dsd.db.Keys;
import com.dsd.db.Meterdatastore;
import com.dsd.db.tables.records.RegisterreadsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Registerreads extends TableImpl<RegisterreadsRecord> {

    private static final long serialVersionUID = 1238157501;

    /**
     * The reference instance of <code>MeterDataStore.RegisterReads</code>
     */
    public static final Registerreads REGISTERREADS = new Registerreads();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegisterreadsRecord> getRecordType() {
        return RegisterreadsRecord.class;
    }

    /**
     * The column <code>MeterDataStore.RegisterReads.registerNum</code>.
     */
    public final TableField<RegisterreadsRecord, Integer> REGISTERNUM = createField("registerNum", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>MeterDataStore.RegisterReads.readType</code>.
     */
    public final TableField<RegisterreadsRecord, Integer> READTYPE = createField("readType", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>MeterDataStore.RegisterReads.readValue</code>.
     */
    public final TableField<RegisterreadsRecord, Double> READVALUE = createField("readValue", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>MeterDataStore.RegisterReads.UOM</code>.
     */
    public final TableField<RegisterreadsRecord, String> UOM = createField("UOM", org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>MeterDataStore.RegisterReads.readTime</code>.
     */
    public final TableField<RegisterreadsRecord, Timestamp> READTIME = createField("readTime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>MeterDataStore.RegisterReads.maxDemandTime</code>.
     */
    public final TableField<RegisterreadsRecord, Timestamp> MAXDEMANDTIME = createField("maxDemandTime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>MeterDataStore.RegisterReads.touTier</code>.
     */
    public final TableField<RegisterreadsRecord, Integer> TOUTIER = createField("touTier", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>MeterDataStore.RegisterReads.serialNumber</code>.
     */
    public final TableField<RegisterreadsRecord, String> SERIALNUMBER = createField("serialNumber", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * Create a <code>MeterDataStore.RegisterReads</code> table reference
     */
    public Registerreads() {
        this(DSL.name("RegisterReads"), null);
    }

    /**
     * Create an aliased <code>MeterDataStore.RegisterReads</code> table reference
     */
    public Registerreads(String alias) {
        this(DSL.name(alias), REGISTERREADS);
    }

    /**
     * Create an aliased <code>MeterDataStore.RegisterReads</code> table reference
     */
    public Registerreads(Name alias) {
        this(alias, REGISTERREADS);
    }

    private Registerreads(Name alias, Table<RegisterreadsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Registerreads(Name alias, Table<RegisterreadsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Meterdatastore.METERDATASTORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REGISTERREADS_FK_REGISTERREADS_1_IDX, Indexes.REGISTERREADS_UK_REGISTER_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RegisterreadsRecord>> getKeys() {
        return Arrays.<UniqueKey<RegisterreadsRecord>>asList(Keys.KEY_REGISTERREADS_UK_REGISTER_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RegisterreadsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RegisterreadsRecord, ?>>asList(Keys.FK_REGISTERREADS_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Registerreads as(String alias) {
        return new Registerreads(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Registerreads as(Name alias) {
        return new Registerreads(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Registerreads rename(String name) {
        return new Registerreads(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Registerreads rename(Name name) {
        return new Registerreads(name, null);
    }
}
