/*
 * This file is generated by jOOQ.
*/
package com.dsd.db.tables;


import com.dsd.db.Indexes;
import com.dsd.db.Keys;
import com.dsd.db.Meterdatastore;
import com.dsd.db.tables.records.DeviceeventsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Deviceevents extends TableImpl<DeviceeventsRecord> {

    private static final long serialVersionUID = -1649212410;

    /**
     * The reference instance of <code>MeterDataStore.deviceEvents</code>
     */
    public static final Deviceevents DEVICEEVENTS = new Deviceevents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeviceeventsRecord> getRecordType() {
        return DeviceeventsRecord.class;
    }

    /**
     * The column <code>MeterDataStore.deviceEvents.deviceID</code>.
     */
    public final TableField<DeviceeventsRecord, String> DEVICEID = createField("deviceID", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>MeterDataStore.deviceEvents.eventName</code>.
     */
    public final TableField<DeviceeventsRecord, String> EVENTNAME = createField("eventName", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>MeterDataStore.deviceEvents.eventTime</code>.
     */
    public final TableField<DeviceeventsRecord, Timestamp> EVENTTIME = createField("eventTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>MeterDataStore.deviceEvents.eventText</code>.
     */
    public final TableField<DeviceeventsRecord, String> EVENTTEXT = createField("eventText", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>MeterDataStore.deviceEvents</code> table reference
     */
    public Deviceevents() {
        this(DSL.name("deviceEvents"), null);
    }

    /**
     * Create an aliased <code>MeterDataStore.deviceEvents</code> table reference
     */
    public Deviceevents(String alias) {
        this(DSL.name(alias), DEVICEEVENTS);
    }

    /**
     * Create an aliased <code>MeterDataStore.deviceEvents</code> table reference
     */
    public Deviceevents(Name alias) {
        this(alias, DEVICEEVENTS);
    }

    private Deviceevents(Name alias, Table<DeviceeventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Deviceevents(Name alias, Table<DeviceeventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Meterdatastore.METERDATASTORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEVICEEVENTS_FK_DEVICEEVENTS_1_IDX, Indexes.DEVICEEVENTS_UK_DEVICEEVENTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DeviceeventsRecord>> getKeys() {
        return Arrays.<UniqueKey<DeviceeventsRecord>>asList(Keys.KEY_DEVICEEVENTS_UK_DEVICEEVENTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DeviceeventsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DeviceeventsRecord, ?>>asList(Keys.FK_DEVICEEVENTS_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Deviceevents as(String alias) {
        return new Deviceevents(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Deviceevents as(Name alias) {
        return new Deviceevents(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Deviceevents rename(String name) {
        return new Deviceevents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Deviceevents rename(Name name) {
        return new Deviceevents(name, null);
    }
}
